=============
CSS設計
=============

コンテンツ
=============

* PRECSS

CSSの基本
=========

セレクター
-------------

* 単純セレクター
    * 要素型セレクター(p{})
    * 全称セレクター(``*{}``)
    * 属性セレクター(``a[href="http://www.w3.org/"]{}``)
    * クラスセレクター(.my-class{})
    * IDセレクター(#my-id{})
    * 擬似クラス(a:visited{})
* 擬似要素(a::before{})
* 結合子
    * 子孫結合子(div p)
    * 子結合子(div > p)
    * 兄弟結合子(div + p)
    * 一般兄弟結合子(div ~ p)

カスケーディング
------------------

セレクターに対するプロパティの適用順

#. 重要度
#. 詳細度
    #. IDセレクター
    #. クラスセレクター・属性セレクター・擬似クラス
    #. 要素型セレクター
#. コードの順序

リセットCSS
-----------

#. ハードリセット

各要素の余白を取り除き、フォントサイズを統一する

#. ノーマライズ

デフォルトに近い形でスタイル定義がされる

CSS設計のゴール
--------------

#. 予測できる
#. 再利用できる
#. 保守できる
#. 拡張できる

CSS設計のポイント
----------------

#. 特製に応じて分類する
#. HTMLとスタイリングが疎結合である
    要素型セレクターを利用しない
#. 影響範囲がみだりに広すぎない
    * スコープを絞る
    * 影響範囲の広いCSS煮含めるスタイリングは最小限にする
#. 特定のコンテキストにみだりに依存していない
    コンテキスト=場所や状況
#. 詳細度がみだりに高くない
    セレクターはクラスセレクターを利用する
#. クラス名から影響範囲が想像できる
    モジュールの子要素には、モジュールのルート要素のクラス名を継承させる
#. クラス名から見た目・機能・役割が想像できる
#. 拡張しやすい
    * シングルクラス設計
    * マルチクラス設計

PRECSS
==========

グループ
--------

1. ベース
2. レイアウト
3. モジュール
    a. ブロックモジュール
    b. エレメントモジュール
4. ヘルパー
5. ユニーク
6. プログラム

基本的な指針
------------

1. 命名規則
    
    グループの接頭辞(2文字) + アンダースコア(_) + クラス名
    
    | 可読性の損なわれないかぎり、単語を省略することを推奨する
    | 意味のある、または挙動の読み取れる命名規則をクラス名にする

2. ベースグループ
    
    接頭辞なし

    | リセットCSSのルールセットや標準となるスタイリングを行う
    | 特定のスコープ内の限定的なベースラインの適用も許容する

3. レイアウトグループ

    接頭辞(ly_)[layout]

    | ヘッダー等大きなレイアウトを形成する要素に使用
    | 原則レイアウトに関わるスタイリングのみ行う

4. モジュールグループ

    | 再利用性の高いコードをモジュールとよぶ
    | 大きさにより、ブロックモジュールとエレメントモジュールに分ける

4a. ブロックモジュール

    接頭辞(bl_)[block]

    | モジュール特有の子要素、エレメントモジュールや他のブロックモジュールをまとめ、
    | 様々なページで利用可能とする
    | 他の要素に影響を及ばさないスタイルのみ適用する
    | レイアウトに関わる指定が必要な場合は、コンテキストのエレメントとしてスタイルを適用する

    命名規則

    * Block - ブロックモジュールの単位
    * Unit - Blockの集まり
    * Container - Unitの集まり

4b. エレメントモジュール

    接頭辞(el_)[element]

    | ボタンやラベルなどの最小単位のモジュール
    | 他の色々なモジュールの中に埋め込まれる
    | 命名は汎用的な名前を利用

5. モディファイア

    | 命名規則
    | 基になるクラス名__モディファイア名

    | 「規則により振る舞いが変わる」際などに、上書きを行う
    | 命名では、見た目よりも意味を重視(色を[theme]など) 
    | スタイルを上書きする際は、セレクターに複合クラスを使用して、詳細度を高める

6. ヘルパーグループ

    接頭辞(hp_)[helper]

    | 一部だけスタイルを調整したいときに利用
    | !importantをつけることが推奨

7. ユニークグループ

    接頭辞(un_)[unique]

    | あるページでしか使用されないグループ


8. プログラムグループ

    * 接頭辞(js_)[JavaScript]
    | JavaScriptで要素を取得するクラス

    * 接頭辞(is_)
    | 要素の状態を管理するクラス
    | !importantの使用が推奨

    | JavaScript等のプログラムで要素にタッチする際、状態を管理する際に利用
    